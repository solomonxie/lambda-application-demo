swagger: "2.0"

# ========= APPLICATION LEVEL INFO ==============
info:
  title: My Application
  description: Description in Markdown.
  version: 1.0.0


# ======== API GATEWAY: REST API ==============
x-rest-api-info:
  type: AWS::ApiGateway::RestApi
  name: "demo-rest-api-2"
  throttling:
    rate-limit: 100
    burst-limit: 200
  vpc-endpoint-ids:
    - 1234
    - 5678

# ======== API GATEWAY: HTTP API ==============
x-http-api-info:
  type: AWS::ApiGateway::RestApi
  name: "demo-rest-api-2"
  throttling:
    rate-limit: 100
    burst-limit: 200
  vpc-endpoint-ids:
    - 1234
    - 5678

# ======== EVENT BRIDGE ==============
x-eventbridge-info:
  type: AWS::EventBridge
  name: "demo-cronjob-01"


# ======== LAMBDA FUNCTIONS ==============
x-lambda:
  # - name: "lambda-demo-func-get-status"
  #   runtime: python3.8
  #   arch: x86_64
  #   handler: application.services.service1.lambda_handlers.status_handler
  #   role-name: "Lambda-General-Execution-Role"
  #   layers:
  #     - type: python-requirements
  #       manifest: ./application/services/service1/requirements.txt
  #   upload-ignore:
  #     - iam/*
  #     - utils/*
  #     - scripts/*
  # - name: "lambda-demo-func-get-user"
  #   runtime: python3.8
  #   handler: application.services.service2.lambda_handlers.user_handler
  #   role-name: "Lambda-General-Execution-Role"
  #   upload-ignore:
  #     - iam/*
  #     - utils/*
  #     - scripts/*
  # - name: "lambda-demo-periodic-run"
  #   runtime: python3.8
  #   arch: x86_64
  #   handler: application.services.service3.lambda_handlers.handler
  #   role-name: "Lambda-General-Execution-Role"
  #   layers:
  #     - type: python-requirements
  #       manifest: ./application/services/service3/requirements.txt
  #   upload-ignore:
  #     - iam/*
  #     - utils/*
  #     - scripts/*
  - name: "step-func-1"
    runtime: python3.8
    arch: x86_64
    handler: application.services.service4.lambda_handlers.handler
    role-name: "Lambda-General-Execution-Role"
    layers:
      - type: python-requirements
        manifest: ./application/services/service4/requirements.txt
    upload-ignore:
      - iam/*
      - utils/*
      - scripts/*
  - name: "step-func-2"
    runtime: python3.8
    arch: x86_64
    handler: application.services.service4.lambda_handlers.handler
    role-name: "Lambda-General-Execution-Role"
    layers:
      - type: python-requirements
        manifest: ./application/services/service4/requirements.txt
    upload-ignore:
      - iam/*
      - utils/*
      - scripts/*


# ======== EVENT BRIDGE: RULES ==============
x-schedules:
  schedule1:
    name: 'demo-schedule-001'
    cron: "rate(1 day)"
    x-lambda-name: "lambda-demo-periodic-run"

# ======== STEP FUNCTION: STATE MACHINE ==============
x-step-func:
  machine1:
    name: my-state-01
    definition-path: ./definitions/state_machine1.json
    role-name: "Stepfunc-General-Execution-Role"


#######################################################################
#                    SWAGGER STANDARD DEFINITIONS                     #
#######################################################################
# basePath: /
paths:
  # REST API
  /status:
    get:
      summary: status check
      x-lambda-name: "lambda-demo-func-get-status"
      responses:
        "200":
          description: OK
  /user:
    get:
      summary: Returns a user by ID.
      x-api-authorizer:
        type: AWS_IAM
      x-lambda-name: "lambda-demo-func-get-user"
      parameters:
        - in: query
          name: user_id
          required: true
          type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'

# ====== SWAGGER API INPUT PARAMETER DEFINITIONS =========
definitions:
  User:
    properties:
      id:
        type: integer
      name:
        type: string
    # Both properties are required
    required:
      - id
      - name
