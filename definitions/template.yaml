serverless-framework-version: "0.2"

info:
  title: My Application
  description: Description in Markdown.
  version: 1.0.0
  repo_path: "${REPO_PATH}"


services:
  rest-api:
    type: AWS::ApiGateway::RestApi
    name: "demo-rest-api-2"
    throttling:
      rate-limit: 100
      burst-limit: 200
    vpc-endpoint-ids:
      - 1234
      - 5678
  http-api:
    type: AWS::ApiGateway::RestApi
    name: "demo-rest-api-2"
    throttling:
      rate-limit: 100
      burst-limit: 200
    vpc-endpoint-ids:
      - 1234
      - 5678
  eventbridge:
    type: AWS::EventBridge
    name: "demo-cronjob-01"


resources:
  iam:
    roles:
      stepfunc-ro1:
        policy: stepfunc-po1
        event-source: stepfunc
      lambda-ro-2:
        policy: lambda-exe-po2
        event-source: lambda
    policies:
      stepfunc-po1:
        path: ./definitions/iam-step-func-general-execution-policy.json
      lambda-exe-po2:
        path: ./definitions/iam-lambda-general-execution-policy.json
      lambda-log-po3:
        path: ./definitions/iam-lambda-general-logging-policy.json
  cronjobs:
    demo-schedule-001:
      cron: "rate(1 day)"
      target:
        type: 'lambda'
        name: "lambda-demo-periodic-run"
    demo-schedule-002:
      cron: "rate(1 day)"
      target:
        type: 'step-func'
        name: "my-state-01"
  step-func:
    my-state-01:
      definition-path: ./definitions/state_machine1.json
      role-name: "stepfunc-ro1"
  lambda:
    - name: "lambda-demo-func-get-status"
      runtime: python3.8
      arch: x86_64
      handler: application.services.service1.lambda_handlers.status_handler
      role-name: "lambda-ro-2"
      layers:
        - type: python-requirements
          manifest: ./application/services/service1/requirements.txt
      upload-ignore:
        - iam/*
        - utils/*
        - scripts/*
    - name: "lambda-demo-func-get-user"
      runtime: python3.8
      handler: application.services.service2.lambda_handlers.user_handler
      role-name: "lambda-ro-2"
      upload-ignore:
        - iam/*
        - utils/*
        - scripts/*
    - name: "lambda-demo-periodic-run"
      runtime: python3.8
      arch: x86_64
      handler: application.services.service3.lambda_handlers.handler
      role-name: "lambda-ro-2"
      layers:
        - type: python-requirements
          manifest: ./application/services/service3/requirements.txt
      upload-ignore:
        - iam/*
        - utils/*
        - scripts/*
    - name: "step-func-1"
      runtime: python3.8
      arch: x86_64
      handler: application.services.service4.lambda_handlers.handler
      role-name: "stepfunc-ro1"
      layers:
        - type: python-requirements
          manifest: ./application/services/service4/requirements.txt
      upload-ignore:
        - iam/*
        - utils/*
        - scripts/*
    - name: "step-func-2"
      runtime: python3.8
      arch: x86_64
      handler: application.services.service4.lambda_handlers.handler
      role-name: "stepfunc-ro1"
      layers:
        - type: python-requirements
          manifest: ./application/services/service4/requirements.txt
      upload-ignore:
        - iam/*
        - utils/*
        - scripts/*



# SWAGGER / OPEN-API DEFINITIONS
# VERIFY AT: https://editor.swagger.io
swagger-definition:
  swagger: "2.0"
  info:
    title: ${APPLICATION_NAME}
    description: Description in Markdown.
    version: 1.0.0
  paths:
    # REST API
    /status:
      get:
        summary: status check
        x-lambda-name: "lambda-demo-func-get-status"
        responses:
          "200":
            description: OK
    /user:
      get:
        summary: Returns a user by ID.
        x-api-authorizer:
          type: AWS_IAM
        x-lambda-name: "lambda-demo-func-get-user"
        parameters:
          - in: query
            name: user_id
            required: true
            type: integer
        responses:
          "200":
            description: OK
            schema:
              $ref: '#/definitions/User'
  definitions:
    User:
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - id
        - name
